Madlibs project

***** !!!   issues I need a solution to: the required attribute for the input field isn't working   !!!   *****




-   chat gpt possible solution - 
The `required` attribute in HTML is used to specify that an input field must be filled out before submitting the form. However, it seems like your form is not submitting correctly even though the `required` attribute is applied to the input fields.

One possible reason for the issue could be the JavaScript code that handles the form submission. It's important to ensure that the form is validated properly before executing the form submission logic.
-------------------------------------------------------------------------

Here are a few steps you can take to troubleshoot and resolve the issue:

1. Check JavaScript Code: Make sure that the JavaScript code handling the form submission (`createParagraph()` function) is correctly validating the form fields. Double-check that the code is properly accessing the form elements and performing the necessary validation checks.



--------------------------------------------------------------------------------------------------------------------------------------------------------------



*** possible solution #2  -   ***
2. Validate Form: Before executing the form submission logic, ensure that the form is valid. You can do this by calling the `checkValidity()` method on the form element. For example, you can add the following code at the beginning of your `createParagraph()` function:


    function createParagraph() {
      var form = document.getElementById('myForm');
     if (!form.checkValidity()) {
       // Form is not valid, do not proceed with submission
       return;
     }
    // Rest of the form submission logic
    }
```

    This will check if the form is valid according to the defined validation rules, including the `required` attribute.


    ***  full JS code  ***

    function createParagraph() {
    var form = document.getElementById('myForm');
    if (!form.checkValidity()) {
        //    Form is not valid, do not proceed with submission
      return;
    }
        //      Rest of the form submission logic
 

    var wordOne = document.getElementById("verb").value;
    var wordTwo = document.getElementById("feeling").value;
    var wordThree = document.getElementById("adj1").value;
    var wordFour = document.getElementById("adj2").value;
    var wordFive = document.getElementById("noun").value;
    var wordSix = document.getElementById("flavor").value;
    var wordSeven = document.getElementById("food").value;
    var wordEight = document.getElementById("read").value;
    var wordNine = document.getElementById("adj3").value;
    var wordTen = document.getElementById("adj4").value;
    var wordEleven = document.getElementById("monster").value;

    /* (var name) can be the same name as (getElementbyId value) 
     ex - var wordEleven = document.getElementById("wordEleven").value;
    * even though they can be named the same, the best practice is to give them different names so it's easier to follow the code. If someone else is reading the code it would be difficult for them to follow along  
    */
    var paragraph = '<p>Do not ' + '<span class="highlight">' + wordOne + '</span>' + ' to me before I have had my coffee! Before I get my first sip, I am ' + '<span class="highlight">' + wordTwo + '</span>' + '. If I do not get to practice my morning routine, then the day is sure to be ' + '<span class="highlight">' + wordThree + '</span>' + '. First, I get my ' + '<span class="highlight">' + wordFour +'</span>' + ' ' + '<span class="highlight">' +  wordFive + '</span>' + ' mug. Then, I brew some ' + '<span class="highlight">' + wordSix + '</span>' + ' coffee. Next, I mix in ' + '<span class="highlight">' + wordSeven + '</span>' + '. I enjoy drinking this coffee while reading ' + '<span class="highlight">' + wordEight + '</span>' + '. Once the ritual is complete, I feel ' + '<span class="highlight">' + wordNine + '</span>' + '. When I miss my java break, I turn into a ' + '<span class="highlight">' + wordTen + '</span>' + ' ' + '<span class="highlight">' + wordEleven + '</span>' + '.</p>';

    document.getElementById('answer').innerHTML = paragraph; 
    }


-----------------------------------------------------------------------------------------------------------------------------------------------------




*** possible solution #3  ***

3. Display Validation Messages: If any of the required fields are empty, make sure to display appropriate validation messages to the user. You can use the `setCustomValidity()` method to set a custom validation message for an input field. For example:

```javascript
var verbInput = document.getElementById('verb');
verbInput.setCustomValidity('Please enter a verb.');
```

By setting a custom validity message, the browser will display an error message when the form is submitted without filling out the required field.

Make sure to review your JavaScript code and ensure that the form validation and submission logic is correctly implemented. Additionally, check for any JavaScript errors in the browser console that might be interfering with the form functionality.


***     To display validation messages for the input fields, you can modify your existing JavaScript code as follows:   ***
In this modified code, each input field is assigned to a variable using getElementById. Then, for each input field, a check is performed to ensure that it has a value. If an input field is empty, the setCustomValidity method is called to set a custom validation message for that input field. Additionally, the reportValidity method is called to display the validation message to the user. The function stops execution if any required field is empty, preventing the creation of the paragraph.

Make sure to apply this validation pattern to all the required input fields in your form. Customize the validation messages as needed for each field.

By implementing this code, when the form is submitted and a required field is empty, a validation message will be displayed next to the respective input field, indicating that it needs to be filled out.




*** possible solution #3  -  full JS code  ***

function createParagraph() {
  var verbInput = document.getElementById('verb');
  var feelingInput = document.getElementById('feeling');
  var adj1Input = document.getElementById('adj1');
  var adj2Input = document.getElementById('adj2');
  var nounInput = document.getElementById('noun');
  var flavorInput = document.getElementById('flavor');
  var foodInput = document.getElementById('food');
  var readInput = document.getElementById('read');
  var adj3Input = document.getElementById('adj3');
  var adj4Input = document.getElementById('adj4');
  var monsterInput = document.getElementById('monster');
}
  if (!verbInput.value) {
    verbInput.setCustomValidity('Please enter a verb.');
    verbInput.reportValidity();
    return;
  }

  if (!feelingInput.value) {
    feelingInput.setCustomValidity('Please enter a type of feeling.');
    feelingInput.reportValidity();
    return;
  }

  if (!adj1Input.value) {
    adj1Input.setCustomValidity('Please enter an adjective.');
    adj1Input.reportValidity();
    return;
  }

  if (!adj2Input.value) {
    adj2Input.setCustomValidity('Please enter an adjective.');
    adj2Input.reportValidity();
    return;
  }

  if (!nounInput.value) {
    nounInput.setCustomValidity('Please enter a noun.');
    nounInput.reportValidity();
    return;
  }

  if (!flavorInput.value) {
    flavorInput.setCustomValidity('Please enter a flavor.');
    flavorInput.reportValidity();
    return;
  }

  if (!foodInput.value) {
    foodInput.setCustomValidity('Please enter a type of food.');
    foodInput.reportValidity();
    return;
  }

  if (!readInput.value) {
    readInput.setCustomValidity('Please enter something you read.');
    readInput.reportValidity();
    return;
  }

  if (!adj3Input.value) {
    adj3Input.setCustomValidity('Please enter an adjective.');
    adj3Input.reportValidity();
    return;
  }

  if (!adj4Input.value) {
    adj4Input.setCustomValidity('Please enter an adjective.');
    adj4Input.reportValidity();
    return;
  }

  if (!monsterInput.value) {
    monsterInput.setCustomValidity('Please enter a type of monster.');
    monsterInput.reportValidity();
    return;
  }

  var paragraph = '<p>Do not ' + '<span class="highlight">' + verbInput.value + '</span>' + ' to me before I have had my coffee! Before I get my first sip, I am ' + '<span class="highlight">' + feelingInput.value + '</span>' + '. If I do not get to practice my morning routine, then the day is sure to be ' + '<span class="highlight">' + adj1Input.value + '</span>' + '. First, I get my ' + '<span class="highlight">' + adj2Input.value +'</span>' + ' ' + '<span class="highlight">' +  nounInput.value + '</span>' + ' mug. Then, I brew some ' + '<span class="highlight">' + flavorInput.value + '</span>' + ' coffee. Next, I mix in ' + '<span class="highlight">' + foodInput.value + '</span>' + '. I enjoy drinking this coffee while reading ' + '<span class="highlight">' + readInput.value + '</span>' + '. Once the ritual is complete, I feel ' + '<span class="highlight">' + adj3Input.value + '</span>' + '. When I miss my java break, I turn into a ' + '<span class

